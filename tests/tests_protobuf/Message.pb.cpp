// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format_lite_inl.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#    include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace com {
namespace amazonaws {
namespace iot {
namespace securedtunneling {
class MessageDefaultTypeInternal {
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
} // namespace securedtunneling
} // namespace iot
} // namespace amazonaws
} // namespace com
namespace protobuf_Message_2eproto {
static void InitDefaultsMessage() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::com::amazonaws::iot::securedtunneling::_Message_default_instance_;
        new (ptr)::com::amazonaws::iot::securedtunneling::Message();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::com::amazonaws::iot::securedtunneling::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Message = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessage},
    {}};

void InitDefaults() {
    ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
}

} // namespace protobuf_Message_2eproto
namespace com {
namespace amazonaws {
namespace iot {
namespace securedtunneling {
bool Message_Type_IsValid(int value) {
    switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_Type Message::UNKNOWN;
const Message_Type Message::DATA;
const Message_Type Message::STREAM_START;
const Message_Type Message::STREAM_RESET;
const Message_Type Message::SESSION_RESET;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Message::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kStreamIdFieldNumber;
const int Message::kIgnorableFieldNumber;
const int Message::kPayloadFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message() : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
    ::google::protobuf::internal::InitSCC(&protobuf_Message_2eproto::scc_info_Message.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:com.amazonaws.iot.securedtunneling.Message)
}
Message::Message(const Message &from) : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.payload().size() > 0) {
        payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    ::memcpy(
        &type_,
        &from.type_,
        static_cast<size_t>(reinterpret_cast<char *>(&ignorable_) - reinterpret_cast<char *>(&type_)) +
            sizeof(ignorable_));
    // @@protoc_insertion_point(copy_constructor:com.amazonaws.iot.securedtunneling.Message)
}

void Message::SharedCtor() {
    payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(
        &type_,
        0,
        static_cast<size_t>(reinterpret_cast<char *>(&ignorable_) - reinterpret_cast<char *>(&type_)) +
            sizeof(ignorable_));
}

Message::~Message() {
    // @@protoc_insertion_point(destructor:com.amazonaws.iot.securedtunneling.Message)
    SharedDtor();
}

void Message::SharedDtor() {
    payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}
const Message &Message::default_instance() {
    ::google::protobuf::internal::InitSCC(&protobuf_Message_2eproto::scc_info_Message.base);
    return *internal_default_instance();
}

void Message::Clear() {
    // @@protoc_insertion_point(message_clear_start:com.amazonaws.iot.securedtunneling.Message)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(
        &type_,
        0,
        static_cast<size_t>(reinterpret_cast<char *>(&ignorable_) - reinterpret_cast<char *>(&type_)) +
            sizeof(ignorable_));
    _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                                                                \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                                                              \
    goto failure
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(&_internal_metadata_);
    ::google::protobuf::io::StringOutputStream unknown_fields_output(unknown_fields_setter.buffer());
    ::google::protobuf::io::CodedOutputStream unknown_fields_stream(&unknown_fields_output, false);
    // @@protoc_insertion_point(parse_start:com.amazonaws.iot.securedtunneling.Message)
    for (;;) {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
            // .com.amazonaws.iot.securedtunneling.Message.Type type = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::
                             ReadPrimitive<int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                                 input, &value)));
                    set_type(static_cast<::com::amazonaws::iot::securedtunneling::Message_Type>(value));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // int32 streamId = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(input, &streamid_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // bool ignorable = 3;
            case 3: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

                    DO_((::google::protobuf::internal::WireFormatLite::
                             ReadPrimitive<bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                                 input, &ignorable_)));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            // bytes payload = 4;
            case 4: {
                if (static_cast<::google::protobuf::uint8>(tag) ==
                    static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(input, this->mutable_payload()));
                } else {
                    goto handle_unusual;
                }
                break;
            }

            default: {
            handle_unusual:
                if (tag == 0) {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, &unknown_fields_stream));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:com.amazonaws.iot.securedtunneling.Message)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:com.amazonaws.iot.securedtunneling.Message)
    return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream *output) const {
    // @@protoc_insertion_point(serialize_start:com.amazonaws.iot.securedtunneling.Message)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .com.amazonaws.iot.securedtunneling.Message.Type type = 1;
    if (this->type() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->type(), output);
    }

    // int32 streamId = 2;
    if (this->streamid() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->streamid(), output);
    }

    // bool ignorable = 3;
    if (this->ignorable() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ignorable(), output);
    }

    // bytes payload = 4;
    if (this->payload().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(4, this->payload(), output);
    }

    output->WriteRaw(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                          : _internal_metadata_.default_instance())
            .data(),
        static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                              ? _internal_metadata_.unknown_fields()
                              : _internal_metadata_.default_instance())
                             .size()));
    // @@protoc_insertion_point(serialize_end:com.amazonaws.iot.securedtunneling.Message)
}

size_t Message::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:com.amazonaws.iot.securedtunneling.Message)
    size_t total_size = 0;

    total_size +=
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                          : _internal_metadata_.default_instance())
            .size();

    // bytes payload = 4;
    if (this->payload().size() > 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->payload());
    }

    // .com.amazonaws.iot.securedtunneling.Message.Type type = 1;
    if (this->type() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // int32 streamId = 2;
    if (this->streamid() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->streamid());
    }

    // bool ignorable = 3;
    if (this->ignorable() != 0) {
        total_size += 1 + 1;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Message::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite &from) {
    MergeFrom(*::google::protobuf::down_cast<const Message *>(&from));
}

void Message::MergeFrom(const Message &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:com.amazonaws.iot.securedtunneling.Message)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.payload().size() > 0) {

        payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (from.type() != 0) {
        set_type(from.type());
    }
    if (from.streamid() != 0) {
        set_streamid(from.streamid());
    }
    if (from.ignorable() != 0) {
        set_ignorable(from.ignorable());
    }
}

void Message::CopyFrom(const Message &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:com.amazonaws.iot.securedtunneling.Message)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Message::IsInitialized() const {
    return true;
}

void Message::Swap(Message *other) {
    if (other == this)
        return;
    InternalSwap(other);
}
void Message::InternalSwap(Message *other) {
    using std::swap;
    payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    swap(type_, other->type_);
    swap(streamid_, other->streamid_);
    swap(ignorable_, other->ignorable_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Message::GetTypeName() const {
    return "com.amazonaws.iot.securedtunneling.Message";
}

// @@protoc_insertion_point(namespace_scope)
} // namespace securedtunneling
} // namespace iot
} // namespace amazonaws
} // namespace com
namespace google {
namespace protobuf {
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::amazonaws::iot::securedtunneling::Message *Arena::CreateMaybeMessage<
    ::com::amazonaws::iot::securedtunneling::Message>(Arena *arena) {
    return Arena::CreateInternal<::com::amazonaws::iot::securedtunneling::Message>(arena);
}
} // namespace protobuf
} // namespace google

// @@protoc_insertion_point(global_scope)
